import React, { useState, useEffect, useMemo } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';

// --- Icon SVGs ---
const ChevronDownIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polyline points="6 9 12 15 18 9"></polyline>
  </svg>
);

const CheckCircleIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-green-500">
    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
    <polyline points="22 4 12 14.01 9 11.01"></polyline>
  </svg>
);

// --- Initial Survey Data ---
const initialSurveyData = [
  {
    id: "cat1",
    categoryName: "Accountability",
    guidingQuestions: "Who is accountable for the AI system's development, deployment, and outcomes? Are roles and responsibilities clearly defined, documented, and communicated? Is there a mechanism for redress if things go wrong?",
    qualitativeAnswer: "", 
    isOpen: true,
    kpis: [
      { id: "kpi1_1", text: "Existence of a clear governance structure for AI, with defined roles and responsibilities.", score: 0, maxScore: 5 },
      { id: "kpi1_2", text: "Documented processes for AI system approval, monitoring, and decommissioning.", score: 0, maxScore: 5 },
      { id: "kpi1_3", text: "Availability of clear channels for stakeholders to raise concerns or seek redress regarding AI system behavior.", score: 0, maxScore: 5 },
      { id: "kpi1_4", text: "Regular training for relevant personnel on AI ethics, risks, and accountability.", score: 0, maxScore: 5 }
    ]
  },
  {
    id: "cat2",
    categoryName: "Fairness & Non-Discrimination",
    guidingQuestions: "How does the AI system avoid unfair bias and discrimination? What measures are in place to identify, mitigate, and monitor biases in data, algorithms, and outcomes?",
    qualitativeAnswer: "", 
    isOpen: false,
    kpis: [
      { id: "kpi2_1", text: "Bias detection and mitigation techniques are implemented throughout the AI lifecycle.", score: 0, maxScore: 5 },
      { id: "kpi2_2", text: "Regular testing for fairness across different demographic groups and sensitive attributes.", score: 0, maxScore: 5 },
      { id: "kpi2_3", text: "Data sources are assessed for representativeness and potential biases.", score: 0, maxScore: 5 },
      { id: "kpi2_4", text: "Mechanisms to address identified biases and ensure equitable outcomes.", score: 0, maxScore: 5 }
    ]
  },
  {
    id: "cat3",
    categoryName: "Transparency & Explainability",
    guidingQuestions: "How transparent is the AI system's decision-making process? Can its operations and outcomes be understood and explained to relevant stakeholders?",
    qualitativeAnswer: "", 
    isOpen: false,
    kpis: [
      { id: "kpi3_1", text: "Comprehensive documentation on AI model design, data, and limitations is maintained.", score: 0, maxScore: 5 },
      { id: "kpi3_2", text: "Methods for explaining AI decisions (e.g., XAI tools) are used where appropriate.", score: 0, maxScore: 5 },
      { id: "kpi3_3", text: "Users and affected individuals are clearly informed when interacting with or being assessed by an AI system.", score: 0, maxScore: 5 },
      { id: "kpi3_4", text: "Information about the AI system's purpose, capabilities, and limitations is accessible.", score: 0, maxScore: 5 }
    ]
  },
  {
    id: "cat4",
    categoryName: "Security & Safety",
    guidingQuestions: "How is the AI system protected from security threats and designed to operate safely? What measures prevent unintended harm or misuse?",
    qualitativeAnswer: "", 
    isOpen: false,
    kpis: [
      { id: "kpi4_1", text: "Robust security measures are in place to protect AI models, data, and infrastructure.", score: 0, maxScore: 5 },
      { id: "kpi4_2", text: "Regular vulnerability assessments and penetration testing are conducted.", score: 0, maxScore: 5 },
      { id: "kpi4_3", text: "Fail-safe mechanisms and human oversight are implemented to prevent critical failures.", score: 0, maxScore: 5 },
      { id: "kpi4_4", text: "AI systems are tested for robustness against adversarial attacks and unexpected inputs.", score: 0, maxScore: 5 }
    ]
  },
   {
    id: "cat5",
    categoryName: "Privacy",
    guidingQuestions: "How does the AI system respect and protect individual privacy? Are data handling practices compliant with privacy regulations and ethical standards?",
    qualitativeAnswer: "", 
    isOpen: false,
    kpis: [
      { id: "kpi5_1", text: "Data minimization principles are applied; only necessary data is collected and processed.", score: 0, maxScore: 5 },
      { id: "kpi5_2", text: "Privacy-enhancing technologies (e.g., anonymization, differential privacy) are used where appropriate.", score: 0, maxScore: 5 },
      { id: "kpi5_3", text: "Clear policies and procedures for data consent, access, storage, and deletion are established.", score: 0, maxScore: 5 },
      { id: "kpi5_4", text: "Regular privacy impact assessments (PIAs) are conducted for AI systems.", score: 0, maxScore: 5 }
    ]
  }
];

// --- Helper Functions ---
// Calculates the score for a single category based on its KPIs
const calculateCategoryScore = (kpis) => {
  const scoredKpis = kpis.filter(kpi => kpi.score > 0); // Consider only KPIs that have been scored (not N/A)
  if (scoredKpis.length === 0) return { score: 0, scoredKpisCount: 0, totalKpis: kpis.length };
  
  const totalScore = scoredKpis.reduce((sum, kpi) => sum + kpi.score, 0);
  const maxPossibleScore = scoredKpis.reduce((sum, kpi) => sum + kpi.maxScore, 0); // Max score based on *scored* KPIs
  
  return {
    score: maxPossibleScore > 0 ? (totalScore / maxPossibleScore) * 100 : 0, // Score as a percentage
    scoredKpisCount: scoredKpis.length,
    totalKpis: kpis.length
  };
};


// --- Components ---

// ScoreInput Component: Renders radio buttons for scoring a KPI
const ScoreInput = ({ kpiId, currentScore, onChange, maxScore }) => {
  const scoreOptions = [{value: 0, label: "N/A"}]; // 0 for Not Applicable
  for (let i = 1; i <= maxScore; i++) {
    scoreOptions.push({value: i, label: i.toString()});
  }

  return (
    <div className="flex items-center space-x-2 mt-2 mb-3 flex-wrap">
      <span className="text-sm font-medium text-gray-600 mr-2">Rate (1-5):</span>
      {scoreOptions.map(option => (
        <label key={option.value} className="flex items-center space-x-1 cursor-pointer p-1 rounded-md hover:bg-blue-50 mb-1">
          <input
            type="radio"
            name={`kpi-score-${kpiId}`} // Unique name for each KPI's radio group
            value={option.value}
            checked={currentScore === option.value}
            onChange={(e) => onChange(parseInt(e.target.value))}
            className="form-radio h-4 w-4 text-blue-600 transition duration-150 ease-in-out"
          />
          <span className={`text-sm ${currentScore === option.value ? 'font-bold text-blue-700' : 'text-gray-700'}`}>
            {option.label}
          </span>
        </label>
      ))}
    </div>
  );
};

// KpiItem Component: Displays a single KPI and its ScoreInput
const KpiItem = ({ kpi, categoryId, onKpiScoreChange }) => {
  return (
    <div className="py-3 px-4 border border-gray-200 bg-white hover:bg-slate-50 rounded-md mb-2 shadow-sm">
      <p className="text-sm text-gray-800">{kpi.text}</p>
      <ScoreInput
        kpiId={kpi.id}
        currentScore={kpi.score}
        maxScore={kpi.maxScore}
        onChange={(newScore) => onKpiScoreChange(categoryId, kpi.id, newScore)}
      />
    </div>
  );
};

// CategorySection Component: Displays a category with its questions, text area, and KPIs
const CategorySection = ({ category, onKpiScoreChange, onQualitativeAnswerChange, onToggleCategory }) => {
  const categoryMetrics = useMemo(() => calculateCategoryScore(category.kpis), [category.kpis]);
  const progress = categoryMetrics.totalKpis > 0 ? (categoryMetrics.scoredKpisCount / categoryMetrics.totalKpis) * 100 : 0;

  return (
    <div className="mb-6 bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Button to toggle category visibility */}
      <button
        onClick={() => onToggleCategory(category.id)}
        className="w-full flex justify-between items-center p-4 bg-slate-100 hover:bg-slate-200 transition-colors duration-150"
      >
        <h3 className="text-lg font-semibold text-slate-800">{category.categoryName}</h3>
        <div className="flex items-center space-x-2">
            <span className="text-xs font-medium text-slate-600">
                {categoryMetrics.scoredKpisCount}/{categoryMetrics.totalKpis} KPIs scored
            </span>
            <ChevronDownIcon className={`w-5 h-5 text-slate-600 transform transition-transform duration-200 ${category.isOpen ? 'rotate-180' : ''}`} />
        </div>
      </button>
      {/* Content shown when category is open */}
      {category.isOpen && (
        <div className="p-4 border-t border-gray-200">
          {/* Guiding questions section */}
          <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
            <h4 className="text-sm font-semibold text-blue-700 mb-1">Guiding Questions:</h4>
            <p className="text-sm text-gray-700 italic">{category.guidingQuestions}</p>
          </div>
          
          {/* Qualitative Answer Textarea */}
          <div className="mb-6">
            <label htmlFor={`qualitative-answer-${category.id}`} className="block text-sm font-medium text-gray-700 mb-1">
              Your response to the guiding questions:
            </label>
            <textarea
              id={`qualitative-answer-${category.id}`}
              rows="4"
              className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm"
              placeholder="Type your detailed answer here..."
              value={category.qualitativeAnswer || ''} // Ensure value is not undefined
              onChange={(e) => onQualitativeAnswerChange(category.id, e.target.value)}
            ></textarea>
          </div>

          {/* KPIs section */}
          <h4 className="text-md font-semibold text-slate-700 mb-2">Key Performance Indicators (KPIs):</h4>
          <div className="space-y-2">
            {category.kpis.map(kpi => (
              <KpiItem
                key={kpi.id}
                kpi={kpi}
                categoryId={category.id}
                onKpiScoreChange={onKpiScoreChange}
              />
            ))}
          </div>
          {/* Progress bar for KPI completion */}
          <div className="mt-4">
            <div className="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
              <div
                className="bg-blue-600 h-2.5 rounded-full transition-all duration-300 ease-out"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <p className="text-xs text-right text-gray-500 mt-1">{Math.round(progress)}% complete (KPIs)</p>
          </div>
        </div>
      )}
    </div>
  );
};

// ResultsDashboard Component: Displays scores and charts
const ResultsDashboard = ({ surveyData }) => {
  // Calculate scores for each category
  const categoryScores = useMemo(() => {
    return surveyData.map(cat => {
      const { score, scoredKpisCount, totalKpis } = calculateCategoryScore(cat.kpis);
      return {
        name: cat.categoryName,
        score: parseFloat(score.toFixed(2)), // Score as percentage
        completed: `${scoredKpisCount}/${totalKpis}`
      };
    });
  }, [surveyData]);

  // Calculate overall score data for the pie chart
  const overallScoreData = useMemo(() => {
    const allKpis = surveyData.flatMap(cat => cat.kpis);
    const scoredKpis = allKpis.filter(kpi => kpi.score > 0);
    if (scoredKpis.length === 0) return [{ name: 'Overall', value: 0 }]; // Default if no KPIs scored
    
    const totalScoreSum = scoredKpis.reduce((sum, kpi) => sum + kpi.score, 0);
    const maxPossibleScoreSum = scoredKpis.reduce((sum, kpi) => sum + kpi.maxScore, 0);
    
    const overallPercentage = maxPossibleScoreSum > 0 ? (totalScoreSum / maxPossibleScoreSum) * 100 : 0;
    return [
        { name: 'Achieved', value: parseFloat(overallPercentage.toFixed(2)) },
        { name: 'Remaining', value: parseFloat((100 - overallPercentage).toFixed(2)) }
    ];
  }, [surveyData]);

  const overallScoreValue = overallScoreData[0].value; // The 'Achieved' percentage
  const totalScoredKpis = surveyData.reduce((sum, cat) => sum + cat.kpis.filter(kpi => kpi.score > 0).length, 0);
  const totalKpisOverall = surveyData.reduce((sum, cat) => sum + cat.kpis.length, 0);

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#A4DE6C', '#D0ED57', '#FFC658']; // Colors for bar chart
  const PIE_COLORS = ['#0088FE', '#E0E0E0']; // Colors for pie chart (Achieved, Remaining)


  if (!surveyData || surveyData.length === 0) {
    return <div className="p-6 bg-white rounded-lg shadow-md text-center text-gray-500">No survey data available.</div>;
  }
  
  return (
    <div className="p-3 md:p-6 bg-slate-50 rounded-lg shadow-xl sticky top-6">
      <h2 className="text-2xl font-bold text-slate-800 mb-6 text-center">Survey Results (KPIs)</h2>
      
      {/* Overall KPI Progress Pie Chart */}
      <div className="mb-8 p-6 bg-white rounded-lg shadow-md text-center">
        <h3 className="text-lg font-semibold text-slate-700 mb-2">Overall KPI Progress</h3>
        <ResponsiveContainer width="100%" height={150}>
            <PieChart>
                <Pie
                    data={overallScoreData}
                    cx="50%"
                    cy="50%"
                    innerRadius={40}
                    outerRadius={60}
                    fill="#8884d8"
                    paddingAngle={2}
                    dataKey="value"
                >
                    {overallScoreData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={PIE_COLORS[index % PIE_COLORS.length]} />
                    ))}
                </Pie>
                <Tooltip formatter={(value) => `${value}%`} />
                {/* Text in the middle of the pie chart */}
                <text x="50%" y="50%" textAnchor="middle" dominantBaseline="middle" className="text-2xl font-bold fill-slate-700">
                    {`${overallScoreValue}%`}
                </text>
            </PieChart>
        </ResponsiveContainer>
        <p className="text-sm text-slate-600 mt-2">{totalScoredKpis} of {totalKpisOverall} KPIs scored.</p>
         {/* Completion message */}
         {overallScoreValue === 100 && totalScoredKpis === totalKpisOverall && (
            <div className="mt-3 flex items-center justify-center text-green-600">
                <CheckCircleIcon />
                <span className="ml-2 font-semibold">KPI Assessment Complete!</span>
            </div>
        )}
      </div>

      {/* KPI Scores by Category Bar Chart */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-slate-700 mb-4">KPI Scores by Category (%)</h3>
        {/* Show chart if there's data, otherwise show placeholder */}
        {categoryScores.filter(cat => cat.score > 0 || cat.completed !== `0/${initialSurveyData.find(d => d.categoryName === cat.name)?.kpis.length || 0}`).length > 0 ? (
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={categoryScores} margin={{ top: 5, right: 0, left: -20, bottom: 70 }}> {/* Adjusted bottom margin for XAxis labels */}
              <CartesianGrid strokeDasharray="3 3" vertical={false} />
              <XAxis 
                dataKey="name" 
                angle={-40} 
                textAnchor="end" 
                height={10} // Minimal height, actual height determined by text
                interval={0} // Show all labels
                tick={{ fontSize: 11, fill: '#4A5568' }} 
              />
              <YAxis domain={[0, 100]} tick={{ fontSize: 12, fill: '#4A5568' }} label={{ value: 'Score (%)', angle: -90, position: 'insideLeft', offset:-10, fontSize: 12, fill: '#4A5568' }} />
              <Tooltip formatter={(value) => `${value}%`} />
              <Legend wrapperStyle={{ fontSize: '12px', paddingTop: '20px' }} />
              <Bar dataKey="score" name="Category Score" fill="#3B82F6" barSize={30} radius={[4, 4, 0, 0]}>
                 {/* Custom cell colors for each bar */}
                 {categoryScores.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        ) : (
          <p className="text-sm text-slate-500 text-center py-8">Start scoring KPIs to see category results here.</p>
        )}
      </div>
      {/* Print/Save Button */}
       <button 
            onClick={() => window.print()} // Triggers browser's print dialog
            className="w-full mt-6 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
        >
            Print / Save as PDF
        </button>
    </div>
  );
};


// Main App Component
function App() {
  // State for survey data, initialized from localStorage or initialSurveyData
  const [surveyData, setSurveyData] = useState(() => {
    const savedData = localStorage.getItem('responsibleAiSurveyData');
    if (savedData) {
        const parsedData = JSON.parse(savedData);
        // Ensure qualitativeAnswer and isOpen are correctly initialized for older saved data
        return parsedData.map((cat, index) => ({
            ...cat,
            qualitativeAnswer: cat.qualitativeAnswer || "", 
            // Ensure only the first category is open by default on load, or maintain saved state if isOpen was part of it
            isOpen: cat.isOpen !== undefined ? cat.isOpen : (index === 0) 
        }));
    }
    // For a new survey, initialize qualitativeAnswer and set the first category to be open
    return initialSurveyData.map((cat, index) => ({
        ...cat, 
        qualitativeAnswer: "", 
        isOpen: index === 0 
    }));
  });

  // Effect to save surveyData to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem('responsibleAiSurveyData', JSON.stringify(surveyData));
  }, [surveyData]);

  // Handler for changing a KPI score
  const handleKpiScoreChange = (categoryId, kpiId, newScore) => {
    setSurveyData(prevData =>
      prevData.map(category =>
        category.id === categoryId
          ? {
              ...category,
              kpis: category.kpis.map(kpi =>
                kpi.id === kpiId ? { ...kpi, score: newScore } : kpi
              ),
            }
          : category
      )
    );
  };

  // Handler for changing a qualitative answer
  const handleQualitativeAnswerChange = (categoryId, newAnswer) => {
    setSurveyData(prevData =>
      prevData.map(category =>
        category.id === categoryId
          ? { ...category, qualitativeAnswer: newAnswer }
          : category
      )
    );
  };

  // Handler for toggling category visibility
  const handleToggleCategory = (categoryId) => {
    setSurveyData(prevData =>
      prevData.map(category =>
        category.id === categoryId
          ? { ...category, isOpen: !category.isOpen }
          // Optional: To close other categories when one is opened, uncomment the line below
          // : { ...category, isOpen: false } 
          : category
      )
    );
  };
  
  // Handler for resetting the entire survey
  const handleResetSurvey = () => {
    if (window.confirm("Are you sure you want to reset all scores and qualitative answers? This action cannot be undone.")) {
        const resetData = initialSurveyData.map((cat, index) => ({
            ...cat, 
            kpis: cat.kpis.map(kpi => ({...kpi, score: 0})), // Reset KPI scores
            qualitativeAnswer: "", // Reset qualitative answer
            isOpen: index === 0 // Open only the first category
        }));
        setSurveyData(resetData);
        localStorage.removeItem('responsibleAiSurveyData'); // Clear from localStorage
    }
  };


  return (
    <div className="min-h-screen bg-slate-100 font-sans">
      {/* Header Section */}
      <header className="bg-slate-800 text-white p-6 shadow-md">
        <div className="container mx-auto max-w-7xl">
          <h1 className="text-3xl font-bold">Responsible AI Self-Assessment Tool</h1>
          <p className="text-sm text-slate-300 mt-1">Evaluate your AI systems against key principles of responsible AI, providing both qualitative responses and KPI scores.</p>
        </div>
      </header>

      {/* Main Content Area */}
      <main className="container mx-auto max-w-7xl p-4 md:p-6">
        {/* Reset Survey Button */}
        <div className="flex justify-end mb-6">
            <button 
                onClick={handleResetSurvey}
                className="bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50"
            >
                Reset Survey
            </button>
        </div>
        {/* Layout for Survey and Results Dashboard */}
        <div className="flex flex-col lg:flex-row gap-6">
          {/* Survey Section (Left/Top) */}
          <div className="lg:w-3/5 space-y-4">
            {surveyData.map(category => (
              <CategorySection
                key={category.id}
                category={category}
                onKpiScoreChange={handleKpiScoreChange}
                onQualitativeAnswerChange={handleQualitativeAnswerChange}
                onToggleCategory={handleToggleCategory}
              />
            ))}
          </div>

          {/* Results Dashboard Section (Right/Bottom) */}
          <div className="lg:w-2/5">
            <ResultsDashboard surveyData={surveyData} />
          </div>
        </div>
      </main>

      {/* Footer Section */}
      <footer className="text-center p-6 text-sm text-slate-600 bg-slate-200 mt-12">
        <p className="mb-1">REV 1.0</p>
        <p className="mb-1">Author: Fabrizio Degni</p>
        <p className="mb-2 italic">Disclaimer: Do not add personal or sensitive information. Use this tool for preliminary scoring and note that it is a work-in-progress application.</p>
        <p>&copy; {new Date().getFullYear()} Responsible AI Assessment. For illustrative purposes.</p>
      </footer>
    </div>
  );
}

export default App;
